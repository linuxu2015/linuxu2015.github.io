[{"title":"ambari_catalog不存在无法启动错误","date":"2017-08-07T13:27:51.000Z","path":"2017/08/07/ambari-catalog不存在无法启动错误/","text":"Caused by: org.apache.hadoop.hbase.TableNotFoundException: SYSTEM.CATALOG 问题描述：ambari界面一直有alert的报警，具体就是连接不到6188端口，而6188端口就是ambari-metric-collect的监听端口，去服务器查看发现6188端口没有起来，去日志查看发现报如下错误 2017-07-20 01:00:16,489 INFO org.apache.hadoop.metrics2.impl.MetricsSystemImpl: Stopping phoenix metrics system... 2017-07-20 01:00:16,489 INFO org.apache.hadoop.metrics2.impl.MetricsSystemImpl: phoenix metrics system stopped. 2017-07-20 01:00:16,489 INFO org.apache.hadoop.metrics2.impl.MetricsSystemImpl: phoenix metrics system shutdown complete. 2017-07-20 01:00:16,489 INFO org.apache.hadoop.yarn.server.applicationhistoryservice.ApplicationHistoryManagerImpl: Stopping ApplicationHistory 2017-07-20 01:00:16,489 FATAL org.apache.hadoop.yarn.server.applicationhistoryservice.ApplicationHistoryServer: Error starting ApplicationHistoryServer org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.MetricsSystemInitializationException: Error creating Metrics Schema in HBase using Phoenix. at org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.PhoenixHBaseAccessor.initMetricSchema(PhoenixHBaseAccessor.java:470) at org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.HBaseTimelineMetricStore.initializeSubsystem(HBaseTimelineMetricStore.java:94) at org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.HBaseTimelineMetricStore.serviceInit(HBaseTimelineMetricStore.java:86) at org.apache.hadoop.service.AbstractService.init(AbstractService.java:163) at org.apache.hadoop.service.CompositeService.serviceInit(CompositeService.java:107) at org.apache.hadoop.yarn.server.applicationhistoryservice.ApplicationHistoryServer.serviceInit(ApplicationHistoryServer.java:84) at org.apache.hadoop.service.AbstractService.init(AbstractService.java:163) at org.apache.hadoop.yarn.server.applicationhistoryservice.ApplicationHistoryServer.launchAppHistoryServer(ApplicationHistoryServer.java:137) at org.apache.hadoop.yarn.server.applicationhistoryservice.ApplicationHistoryServer.main(ApplicationHistoryServer.java:147) Caused by: org.apache.phoenix.exception.PhoenixIOException: SYSTEM.CATALOG at org.apache.phoenix.util.ServerUtil.parseServerException(ServerUtil.java:111) at org.apache.phoenix.query.ConnectionQueryServicesImpl.metaDataCoprocessorExec(ConnectionQueryServicesImpl.java:1292) at org.apache.phoenix.query.ConnectionQueryServicesImpl.metaDataCoprocessorExec(ConnectionQueryServicesImpl.java:1257) at org.apache.phoenix.query.ConnectionQueryServicesImpl.createTable(ConnectionQueryServicesImpl.java:1453) at org.apache.phoenix.schema.MetaDataClient.createTableInternal(MetaDataClient.java:2180) at org.apache.phoenix.schema.MetaDataClient.createTable(MetaDataClient.java:865) at org.apache.phoenix.compile.CreateTableCompiler$2.execute(CreateTableCompiler.java:194) at org.apache.phoenix.jdbc.PhoenixStatement$2.call(PhoenixStatement.java:343) at org.apache.phoenix.jdbc.PhoenixStatement$2.call(PhoenixStatement.java:331) at org.apache.phoenix.call.CallRunner.run(CallRunner.java:53) at org.apache.phoenix.jdbc.PhoenixStatement.executeMutation(PhoenixStatement.java:329) at org.apache.phoenix.jdbc.PhoenixStatement.executeUpdate(PhoenixStatement.java:1421) at org.apache.phoenix.query.ConnectionQueryServicesImpl$13.call(ConnectionQueryServicesImpl.java:2378) at org.apache.phoenix.query.ConnectionQueryServicesImpl$13.call(ConnectionQueryServicesImpl.java:2327) at org.apache.phoenix.util.PhoenixContextExecutor.call(PhoenixContextExecutor.java:78) at org.apache.phoenix.query.ConnectionQueryServicesImpl.init(ConnectionQueryServicesImpl.java:2327) at org.apache.phoenix.jdbc.PhoenixDriver.getConnectionQueryServices(PhoenixDriver.java:233) at org.apache.phoenix.jdbc.PhoenixEmbeddedDriver.createConnection(PhoenixEmbeddedDriver.java:142) at org.apache.phoenix.jdbc.PhoenixDriver.connect(PhoenixDriver.java:202) at java.sql.DriverManager.getConnection(DriverManager.java:664) at java.sql.DriverManager.getConnection(DriverManager.java:270) at org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.query.DefaultPhoenixDataSource.getConnection(DefaultPhoenixDataSource.java:82) at org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.PhoenixHBaseAccessor.getConnection(PhoenixHBaseAccessor.java:376) at org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.PhoenixHBaseAccessor.getConnectionRetryingOnException(PhoenixHBaseAccessor.java:354) at org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.PhoenixHBaseAccessor.initMetricSchema(PhoenixHBaseAccessor.java:398) ... 8 more 解决方法：Shut down Ambari Monitors, and Collector via AmbariCleared out the /var/lib/ambari-metrics-collector dir for fresh restartFrom Ambari -&gt; Ambari Metrics -&gt; Config -&gt; Advanced ams-hbase-site get the hbase.rootdir and hbase-tmp directory hbase.rootdir hbase.tmp.dir Delete or Move the hbase-tmp and hbase.rootdir directories to an archive folderStarted AMS.All services will came online and graphs started to display, after a few minutes","tags":[]},{"title":"java学习记录-if-switch语句","date":"2017-08-06T15:16:23.000Z","path":"2017/08/06/java学习记录-if-switch语句/","text":"记录java学习的练习程序，主要作为语法的熟悉备忘以及一些知识点。 笔记 if语句练习11234567891011class Test1&#123; public static void main(String [] args)&#123; int age = 24; if (age&gt;20)&#123; System.out.print(\"grow up\"); &#125;else &#123; System.out.print(\"little guy\"); &#125; &#125;&#125; 1234567891011121314151617class Test1&#123; public static void main(String [] args)&#123; int age = 10; if (age&gt;24)&#123; System.out.print(\"ddaxue\"); &#125;else if (age &gt;20)&#123; System.out.print(\"gaozhong\"); &#125;else if (age &gt;16)&#123; System.out.print(\"chuzhong\"); &#125;else if (age &gt; 13)&#123; System.out.print(\"xiaoxue\"); &#125;else &#123; System.out.print(\"meishangxue\"); &#125; &#125;&#125; if语句练习2键盘输入三个整数，num1,num2,num3排序输出从大到小1234567891011121314151617181920212223242526272829303132333435import java.util.Scanner;class Test1&#123; public static void main(String [] args)&#123; Scanner s = new Scanner(System.in); System.out.print(\"num1=\"); int num1 = s.nextInt(); System.out.print(\"num2=\"); int num2 = s.nextInt(); System.out.print(\"num3=\"); int num3 = s.nextInt(); if (num1&lt;num2)&#123; if (num3&lt;num1)&#123; System.out.print(num3 + \",\"+num1+\",\"+num2); &#125;else if (num3&gt;num2)&#123; System.out.print(num1 + \",\"+num2+\",\"+num3); &#125;else &#123; System.out.print(num1 + \",\"+num3+\",\"+num2); &#125; //num1 &gt;= num2 &#125;else &#123; if (num3 &lt; num2)&#123; System.out.print(num3 + \",\"+num2+\",\"+num1); &#125;else if (num3 &gt; num1)&#123; System.out.print(num2 + \",\"+num1+\",\"+num3); &#125;else &#123; System.out.print(num2 + \",\"+num3+\",\"+num1); &#125; &#125; &#125;&#125; switch练习11234567891011121314151617181920212223public class TestSwitch &#123; public static void main( String [] args)&#123; int a = 1; int x = 100; switch (a)&#123; case 1: x+=5; System.out.print(\"result=\"+x); break; case 2: x+=10; System.out.print(\"result=\"+x); break; case 3: x+=16; System.out.print(\"result=\"+x); break; default: x+=34; System.out.print(\"result=\"+x); &#125; &#125;&#125; switch练习2键盘输入成绩，打印等级>=90 A90&gt; &gt;=70 B70&gt; &gt;=60 C>60 D12345678910111213141516171819202122232425262728293031323334import java.util.Scanner;class TestSwitch&#123; public static void main(String [] args)&#123; Scanner s = new Scanner(System.in); System.out.print(\"score=\"); int score = s.nextInt(); if (score &gt; 100 || score &lt;0)&#123; System.out.print(\"分数不合法\"); &#125;else &#123; char grade = ' '; switch (score / 10) &#123; case 10: grade = 'A'; System.out.print(\"A\"); break; case 9: grade = 'A'; break; case 8: grade = 'B'; break; case 7: grade = 'B'; break; case 6: grade = 'C'; break; default: grade = 'D'; &#125; System.out.print(\"grade is \" + grade); &#125; &#125;&#125; switch练习3输入月份和日期输出一年的第几天123456789101112131415161718192021222324252627import java.util.Scanner;class TestSwitch&#123; public static void main(String [] args)&#123; Scanner s = new Scanner(System.in); System.out.print(\"mouth=\"); int mouth = s.nextInt(); System.out.print(\"day=\"); int day = s.nextInt(); int days = 0; switch (mouth)&#123; case 12:days += 30; case 11:days+=31; case 10:days+=30; case 9:days+=31; case 8:days+=31; case 7:days+=30; case 6:days+=31; case 5:days+=30; case 4:days+=31; case 3:days+=28; case 2:days+=31; case 1:days+=day; &#125; System.out.print(mouth + \"月\" +day + \"日是第\" +days+ \"天\"); &#125;&#125;","tags":[{"name":"java","slug":"java","permalink":"http://www.linuxu.top/tags/java/"}]},{"title":"phoenix通过phoenix query server连接hbase","date":"2017-08-06T09:55:58.000Z","path":"2017/08/06/phoenix通过phoenix-query-server连接hbase/","text":"集群通过ambari安装phoenix query server，监听端口8765 phoenix安装下载phoenix二进制包注意对应hbase版本，实验环境版本如下 hbase 1.1.2 phoenix 4.10 解压到/usr/local/复制phoenix-4.10.0-HBase-1.1-client.jar phoenix-core-4.10.0-HBase-1.1.jar到hbase的lib目录下 连接hbase./bin/sqlline-thin.py http://phoenix_query_server:8765 通过sql操作hbase进入Phoenix命令行，执行 !tables 即可查看所有Hbase中的所有数据表。 增删查改操作创建表格示例：create table person(id varchar primary key, name varchar); 插入数据示例：upsert into person values (&apos;111&apos;,&apos;jone&apos;); 这里的upsert既有插入也有更新的功能，兼SQL中的insert和update功能，更新时按主键更新。 删除数据示例：delete from person where id=&apos;222&apos;; 查询示例：select * from person; 当前实验只能查询并且修改通过phoenix创建的表，之前存在以及通过其他方式创建的hbase无法查看以及修改 错误：AvaticaClientRuntimeException: Remote driver error: RuntimeException: org.apache.phoenix.exception.PhoenixIOException: Table ‘SYSTEM.CATALOG’ was not found, got: PCB_ST_PHOTO. -PhoenixIOException: Table ‘SYSTEM.CATALOG’ was not found, got: PCB_ST_PHOTO. -TableNotFoundException: Table ‘SYSTEM.CATALOG’ was not found, got: PCB_ST_PHOTO.. Error -1 (00000) null 提示找不到SYSTEM.CATALOG表，这是phoenix第一次连接hbase时需要创建的表，找不到即没有创建成功。 解决方法： ./hbase clean --cleanZK","tags":[{"name":"hadoop","slug":"hadoop","permalink":"http://www.linuxu.top/tags/hadoop/"}]},{"title":"动态路由协议基础","date":"2017-03-03T02:02:30.000Z","path":"2017/03/03/动态路由协议基础/","text":"路由协议是路由器之间交互信息的一种语言，路由器之间通过路由协议共享网络状态和网络可达性的一些信息。路由器依靠动态路由协议来传播和收集路由选择信息。路由协议定义了一套路由器与邻接路由器通信时使用的规则。动态计算路由，适应网络变化，找出本地路由器到网络中其他网段的路由。 常见的动态路由协议： RIP：Routing Information Protocol,路由信息协议 OSPF: Open shortest Path First,开放式最短路径优先 ISIS: Intermediate System to Intermediate System,中间系统到中间系统 BGP:Border Gateway Protocol,边界网关协议 自治系统（Autonomous System）自治系统（AS ）:由同一个技术管理机构管理，使用统一选路策略的一些路由器的集合。自治系统内部的路由协议—-IGP:RIPv1/v2、OSPF、ISIS自治系统之间的路由协议—-EGP:BGP 动态路由协议的分类使用算法距离矢量路由协议 基于距离矢量算法 RIPv1/v2、BGP链路状态路由协议 基于SPF(Shortest Path First) OSPF、ISIS目的地址类型单播路由协议（Unicast Routing Protocol） 目的地址为单播 RIP、OSPF、ISIS、BGP组播路由协议（Multicast Routing Protocol） 目的地址为组播 PIM-SM、PIM-DM 衡量动态路由协议的一些性能指标 正确性能够正确找到最优的路由，且无自环。 快收敛当网络的拓扑发生变化之后，能够迅速在自治系统中作相应的路由改变 低开销协议自身的开销（内存、cpu、网络带宽）最小 安全性协议自身不易受攻击，有安全机制。 普适性适应各种拓扑结构和规模的网络","tags":[]},{"title":"hcna学习(1)","date":"2017-02-22T07:00:09.000Z","path":"2017/02/22/hcna学习-1/","text":"刚开始进行学习hcna的相关知识，做个记录方便后面遇到问题的时候回来查看 配置telnet拓扑图配置R1的telnet功能，使用R2进行连接测试1234567user-interface vty 04 authentication-mode aaa user privilege level 3aaa local-user admin password cipher huawei local-user admin privilege level 3 local-user admin service0type telnet 配置stelnet配置R1的stelnet功能，使用R2进行连接测试(stelnet 在系统视图才有)1234567891011121314system-viewrsa local-key-pair createdisplay rsa local-ley-pair publicuser-interface vty 04 authentication-mode aaa protocol inbound sshaaa local-user admin privilege level 3 local-user admin service-type sshssh user admin authentication-type passwordstelnet server enabledisplay ssh user-informationdisplay ssh server statusdisplay ssh server session R2进行连接时需要执行1ssh client first-time enable ensp连接真实物理机与vmware虚拟机xp拓扑图cloud1（vnet8）配置（不用在意虚拟网看后面的ip地址）cloud2（vnet1）配置（不用在意虚拟网看后面的ip地址）修改本地vnet1和vnet8的ip地址vnet8配置vnet1配置现在真机ping路由器192.168.100.1和192.168.80.1都可以通了下面配置虚拟机xp因为cloud1连接到了vnet8,所以虚拟机也需要使用vnet8的虚拟网卡给虚拟机配置上ip地址后，整个网络就可以互相ping通了","tags":[]},{"title":"基于nginx的开源监控软件nagios搭建","date":"2017-02-20T13:43:26.000Z","path":"2017/02/20/基于nginx的开源监控软件nagios搭建/","text":"nagios相比于zabbix是非常灵活的开源监控软件，但使用起来的门槛比zabbix要高，各种脚本的组合，不像zabbix基本的监控一个agent就搞定了。 安装包的下载源码包下载地址：https://www.nagios.org/downloads/nagios-core/插件下载地址：http://nagios-plugins.org/download/nagios-plugins-2.1.2.tar.gz 安装环境依赖1yum install gcc glibc glibc-common gd gd-devel xinetd openssl-devel unzip autoconf automake wget git vim lrzsz perl perl-devel fcgi-devel fcgi 编译安装创建nagios用户1useradd nagios -d /usr/local/nagios 编译安装nagios123456cd /opt/srctar xf nagios-4.2.4.tar.gzcd nagios-4.2.4./configure --prefix=/usr/local/nagios make allmake install &amp;&amp; make install-init &amp;&amp; make install-commandmode &amp;&amp; make install-config 把nagios添加为系统服务1234chkconfig --add nagios chkconfig nagios offchkconfig --level 35 nagios onchkconfig --list nagios 编译安装nagios插件（nagios-plugins）1234cd /opt/srccd nagios-plugins-2.1.2./configure --prefix=/usr/local/nagios --with-nagios-user=nagios --with-nagios-group=nagiosmake &amp;&amp; make install 安装FCGI使nginx支持需要的包：FCGI:http://www.cpan.org/modules/by-module/FCGI/FCGI-0.78.tar.gzFCGI-ProcManager：http://www.cpan.org/modules/by-module/FCGI/FCGI-ProcManager-0.25.tar.gzIO:http://www.cpan.org/authors/id/G/GB/GBARR/IO-1.25.tar.gzIO-All:http://www.cpan.org/authors/id/I/IN/INGY/IO-All-0.86.tar.gz 编译安装步骤分别解压并进入对应目录后执行（出错请检查上面的依赖（perl、perl-devel）是否安装）123perl Makefile.PL makemake install 创建启动fcgi脚本脚本下载地址：http://www.mike.org.cn/wp-content/uploads/2011/07/perl-fcgi.zip123456789101112131415161718192021222324252627282930313233343536vim /etc/nginx/start_perl_cgi.sh#!/bin/bash#set -x#此处根据情况修改dir=/etc/nginxstop ()&#123;#pkill -f $dir/perl-fcgi.plkill -6 `cat $dir/logs/perl-fcgi.pid`rm $dir/logs/perl-fcgi.pid 2&gt;/dev/nullrm $dir/logs/perl-fcgi.sock 2&gt;/dev/nullecho &quot;stop perl-fcgi done&quot;&#125;start ()&#123;rm $dir/now_start_perl_fcgi.sh 2&gt;/dev/null#注意是否存在logs目录chown nagios.root $dir/logsecho &quot;$dir/perl-fcgi.pl -l $dir/logs/perl-fcgi.log -pid $dir/logs/perl-fcgi.pid -S $dir/logs/perl-fcgi.sock&quot; &gt;&gt;$dir/now_start_perl_fcgi.shchown nagios.nagios $dir/now_start_perl_fcgi.shchmod u+x $dir/now_start_perl_fcgi.shsudo -u nagios $dir/now_start_perl_fcgi.shecho &quot;start perl-fcgi done&quot;&#125;case $1 instop)stop;;start)start;;restart)stopstart;;esac 启动fcgi：1/etc/nginx/start_perl_cgi.sh start 确认进程是否存在12ps aux | grep perlnagios 27125 0.0 0.7 138488 5668 pts/3 S 16:51 0:00 /usr/bin/perl /etc/nginx/perl-fcgi.pl -l /etc/nginx/logs/perl-fcgi.log -pid /etc/nginx/logs/perl-fcgi.pid -S /etc/nginx/logs/perl-fcgi.sock 安装php-fpm1yum install php-fpm 启动php-fpm1service php-fpm start 配置nginx123456789101112131415161718192021222324252627282930vim /etc/nginx/conf.d/nagios.conf server &#123; listen 80; server_name nagios.linuxu.top; root /usr/local/nagios/share; index index.html index.php; auth_basic &quot;admin&quot;; auth_basic_user_file /etc/nginx/htpasswd; location ~ .*\\.php?$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME /usr/local/nagios/share$fastcgi_script_name; &#125; location /nagios/ &#123; gzip off; alias /usr/local/nagios/share/; index index.html index.htm index.php; &#125; location ~ \\.cgi$ &#123; rewrite ^/nagios/cgi-bin/(.*)\\.cgi /$1.cgi break; fastcgi_pass unix:/etc/nginx/logs/perl-fcgi.sock; fastcgi_index index.cgi; fastcgi_param SCRIPT_FILENAME /usr/local/nagios/sbin$fastcgi_script_name; fastcgi_param HTTP_ACCEPT_LANGUAGE en_US; include fastcgi_params; &#125;&#125; nginx web验证帐号密码1htpasswd -c /etc/nginx/conf.d/htpasswd admin 启动nginx1service nginx start 访问nagios web界面http://nagios.linuxu.top/","tags":[{"name":"linux","slug":"linux","permalink":"http://www.linuxu.top/tags/linux/"}]},{"title":"图片测试","date":"2017-02-18T13:02:06.000Z","path":"2017/02/18/图片测试/","text":"图片1234fffjjjlllprint f","tags":[{"name":"图片","slug":"图片","permalink":"http://www.linuxu.top/tags/图片/"}]},{"title":"hexo安装","date":"2017-02-17T14:49:02.000Z","path":"2017/02/17/hexo安装/","text":"hexo环境搭建安装Node.js安装nvmcurl方法:1$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh wget方法1$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh 推荐使用wget方法，当以上执行完毕后重新连接终端，使环境变量生效使用nvm安装Node.js1$ nvm install 4 使用npm安装hexo1$ npm install -g hexo-cli 至此hexo的命令行工具安装完成了 生成hexo目录123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install folder需为空目录现在hexo已经安装完成了，使用命令hexo server启动服务 nginx配置为了能够使用域名访问hexo的服务，现在还需要配置nginx的请求转发到hexo的4000端口nginx配置文件1234567891011121314151617181920212223242526272829303132upstream www_linuxu&#123; ip_hash; server 127.0.0.1:4000;&#125;server&#123; listen 80; server_name www.linuxu.top; access_log /var/log/nginx/linux.com/www.access.log; error_log /var/log/nginx/linux.com/www.error.log; location / &#123; proxy_set_header Host $host; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; client_max_body_size 50m; client_body_buffer_size 256k; proxy_connect_timeout 30; proxy_send_timeout 30; proxy_read_timeout 60; proxy_buffer_size 256k; proxy_buffers 4 256k; proxy_busy_buffers_size 256k; proxy_temp_file_write_size 256k; proxy_next_upstream error timeout invalid_header http_500 http_503 http_404; proxy_max_temp_file_size 128m; proxy_pass http://www_linuxu; &#125;&#125; 重启nginx即可使用域名访问hexo了 结束语本博客只是简单的介绍了下hexo的搭建，刚接触hexo两天，感觉很不错，本来想使用wordpress的，发现hexo更加适合，空闲时间研究了下，就决定使用了，欢迎转载，请注明出自Xulibao’s Blog","tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.linuxu.top/tags/hexo/"}]},{"title":"Hello World","date":"2017-02-17T14:26:35.707Z","path":"2017/02/17/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]